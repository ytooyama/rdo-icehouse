
RDO Neutron Quickstart Plus
単体構成編
++++++++++++++++++++++++++++++++

最終更新日: 2014/7/9

■この文書について
この文書はとりあえず1台に全部入りのOpenStack Icehouse環境をさくっと構築する場合の手順を説明しています。
サーバーとは別途クライアントを用意して、同じネットワーク側(192.168.0.0/24)に接続します｡

この文書は以下の公開資料を元にしています。

RDO Neutron Quickstart
http://openstack.redhat.com/Neutron-Quickstart
http://openstack.redhat.com/Neutron_with_existing_external_network


Step 0: 要件

Software: 
・Red Hat Enterprise Linux (RHEL) 6.5以降
・CentOS, Scientific Linux 6.5以降
・Fedora 20

Hardware:
・CPU 2Core以上 
・メモリー4GB以上
・最低1つのNIC
※All-in-oneの構成を作る場合は、Privateネットワーク用はloインターフェイスを利用できます。

Network:
・インターネットにアクセスできる環境

訳注:
本書では次のネットワーク構成を利用します。

Private Network
192.168.0.0/24
Public Network
192.168.1.0/24

OpenStack Host
eth0: 192.168.0.10/24 
eth1: 192.168.1.10/24
				       
Outline:               　　　   
---------+---------------+----------- Flating
public	 |		 |             
	 |		[X]qrouter     
	 |		 |             
---------|----+----------+----------- Fixed
internal |    |                   
	 |    |	
    eth1 |    |eth0
       +-+----+----+
       | OpenStack |
       |   Host    |
       +-----------+

Other:
・OpenStackノードに以下のように設定

>--
# vi /etc/sysctl.conf

net.ipv4.ip_forward = 1              #変更
net.ipv4.conf.default.rp_filter = 0  #変更

net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
net.ipv4.conf.all.rp_filter = 0     #追記
net.ipv4.conf.all.forwarding = 1    #追記

# sysctl -e -p /etc/sysctl.conf
（設定を反映）
--<


Step 1: SELinuxの設定変更
SELinuxの設定を変更します｡

下記公式サイトのコメントにあるようにSELinuxをpermissiveに設定する
↓
ただしdisableにするとpackstackが想定通り動かない模様。

http://openstack.redhat.com/SELinux_issues

Note: Due to the quantum/neutron rename, SELinux policies are currently broken for Havana, so SELinux must be disabled/permissive on machines running neutron services, edit /etc/selinux/config to set SELINUX=permissive.


Step 2: ソフトウェアリポジトリの追加

ソフトウェアパッケージのインストールとアップデートを行う｡
Neutron環境の構築にはSELinuxの設定変更が必要なので設定完了後、一旦再起動する｡

次のコマンドを実行(Fedora 21では不要):

>--
# yum install -y http://rdo.fedorapeople.org/openstack-icehouse/rdo-release-icehouse.rpm
--<


システムアップデートの実施:

>--
# yum -y update
# reboot
--<


Step 3: Packstackおよび必要パッケージのインストール

以下のようにコマンドを実行します｡

>--
# yum install -y openstack-packstack python-netaddr libguestfs-tools
--<


Step 4:アンサーファイルを生成

以下のようにコマンドを実行します｡

>--
# packstack --gen-answer-file=answer.txt
(answer.txtという名前のファイルを作成する場合)
--<

アンサーファイルを使うことで定義した環境でOpenStackをデプロイできます｡

作成したアンサーファイルは1台のマシンにすべてをインストールする設定が行われています｡IPアドレスや各種パスワードなどを適宜設定します｡


Step 5:アンサーファイルを自分の環境に合わせて設定

OpenStack環境を作るには最低限以下のパラメータを設定します。

・CONFIG_NOVA_COMPUTE_HOSTSにコンピュートノードを設定
-複数のコンピュートノードを追加するにはコンマでIPアドレスを列挙します｡

（1つ指定する例）
CONFIG_NOVA_COMPUTE_HOSTS=192.168.0.10

(複数指定する例)
CONFIG_NOVA_COMPUTE_HOSTS=192.168.0.10,192.168.0.11

・NICを利用したいものに変更する
CONFIG_NOVA_COMPUTE_PRIVIF=lo
CONFIG_NOVA_NETWORK_PRIVIF=lo
CONFIG_NOVA_NETWORK_PUBIF=eth1

NICが複数ある場合は次のように指定しても良い｡
（例）eth1がゲートウェイに接続されている場合

CONFIG_NOVA_COMPUTE_PRIVIF=eth0
CONFIG_NOVA_NETWORK_PRIVIF=eth0
CONFIG_NOVA_NETWORK_PUBIF=eth1

・Dashboardにアクセスするパスワード
CONFIG_KEYSTONE_ADMIN_PW=admin

・テスト用demoユーザーとかネットワークを作らないようにする
CONFIG_PROVISION_DEMO=n

・アンサーファイルのIPアドレス部分を内向きのネットワークIPアドレスに変更（複数個所）
192.168.1.10 -> 192.168.0.10

viで一括文字列置換えを行う場合
:%s/192.168.1.10/192.168.0.10/gc

replace with 192.168.0.10 (y/n/a/q/l/^E/^Y)?
（上書き問い合わせに対して、yと入力していく）

・Cinder VolumeのバックエンドとしてNFSを利用する
# The Cinder backend to use, valid options are: lvm, gluster, nfs,
# vmdk
CONFIG_CINDER_BACKEND=nfs

# A single or comma seprated list of NFS exports to mount, eg: ip-
# address:/export-name
CONFIG_CINDER_NFS_MOUNTS=192.168.0.9:/nfs


Step 6: Packstackを実行してOpenStackのインストール

設定を書き換えたアンサーファイルを使ってOpenStackを導入するには、次のようにアンサーファイルを指定して実行します。

>--
# packstack --answer-file=/root/answer.txt
--<


Step 7: ネットワーク設定の変更

次に外部と通信できるようにするための設定を行います。
http://openstack.redhat.com/Neutron_with_existing_external_network


◆public用として使うNICの設定ファイルを修正
packstack実行後、eth1をbr-exにつなぐように設定をします(※BOOTPROTOは設定しない)

eth1からIPアドレス、サブネットマスク、ゲートウェイの設定を削除して次の項目だけを記述し、br-exの方に設定を書き込みます｡

>--
# vi /etc/sysconfig/network-scripts/ifcfg-eth1

DEVICE=eth1
ONBOOT=yes
HWADDR=52:54:00:92:05:AE # your eth1's hwaddr
TYPE=OVSPort
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
--<


◆ブリッジインターフェイスの作成
br-exにeth1のIPアドレスを設定します。

>--
# vi /etc/sysconfig/network-scripts/ifcfg-br-ex

DEVICE=br-ex
ONBOOT=yes
DEVICETYPE=ovs
TYPE=OVSBridge
BOOTPROTO=static
IPADDR=192.168.1.10
NETMASK=255.255.255.0  # netmask
GATEWAY=192.168.1.1    # gateway
DNS1=8.8.8.8           # nameserver
DNS2=8.8.4.4
--<

/etc/neutron/plugin.iniに次の設定を追加します。
>--
network_vlan_ranges = physnet1
bridge_mappings = physnet1:br-ex
--<

ここまでできたらいったんホストを再起動します。
>--
# reboot
--<


Step 8: ネットワークの追加

br-exにeth1を割り当てて仮想マシンをハイパーバイザー外部と通信できるようにする為の経路が確保されていることを確認します。

>--
# ovs-vsctl show
d5305735-c3db-410a-9182-f5ec63823c56
    Bridge br-ex
        Port phy-br-ex
            Interface phy-br-ex
        Port "eth1"
            Interface "eth1"
        Port br-ex
            Interface br-ex
                type: internal
    Bridge br-int
        Port int-br-ex
            Interface int-br-ex
        Port br-int
            Interface br-int
                type: internal
    ovs_version: "1.11.0"
--<

OSやハードウェア側の設定が終わったら、OpenStackが利用するネットワークを作成してみましょう｡OpenStackにおけるネットワークの設定は以下の順で行います｡

・ルーターを作成
・ネットワークを作成
・ネットワークサブネットを作成

OpenStackの環境構成をコマンドで実行する場合は、/root/keystonerc_adminファイルをsourceコマンドで読み込んでから実行してください｡

>--
# source keystonerc_admin
—<

それでは順に行っていきましょう｡


◆ルーターの作成
ルーターの作成は次のようにコマンドを実行します。
>--
# neutron router-create router1
--<


◆ネットワークの作成
ネットワークの作成は次のようにコマンドを実行します。

・テナントリストを確認
登録済みのテナントを確認して、ネットワーク作成時に指定するテナントを検討します｡

>--
# keystone tenant-list
+----------------------------------+----------+---------+
|                id                |   name   | enabled |
+----------------------------------+----------+---------+
| 2b0260a2580842abab33b56dae6a145f |  admin   |   True  |
| f032057fb6044faa81a30ad81231d9a8 | alt_demo |   True  |
| 93edefe5c7304ef9b268b1459740b7d8 |   demo   |   True  |
| 20a6abed5e8549f29a76fa26b2b1c8db | services |   True  |
+----------------------------------+----------+---------+
--<

・パブリックネットワークの場合
本例ではtenant-idはadminのものを指定します｡

>--
# neutron net-create public --router:external=True --tenant-id 2b0260a2580842abab33b56dae6a145f
--<

net-createコマンドの先頭にはまずネットワーク名を記述します｡tenant-idは「keystone tenant-list」で出力される中から「テナント」を指定します。router:external=Trueは外部ネットワークとして指定するかしないかを設定します｡プライベートネットワークを作る場合は指定する必要はありません｡

・プライベートネットワークの場合
本例ではtenant-idはserviceのものを指定します｡
>--
# neutron net-create demo-net --shared --tenant-id 20a6abed5e8549f29a76fa26b2b1c8db
--<

ネットワークを共有するには--sharedオプションを付けて実行します｡


◆ネットワークサブネットの登録
ネットワークで利用するサブネットを定義します｡

>--
# neutron subnet-create --name public_subnet --enable_dhcp=False --allocation-pool=start=192.168.1.241,end=192.168.1.254 --gateway=192.168.1.1 public 192.168.1.0/24
Created a new subnet:
（略）
--<

これでpublic側ネットワークにサブネットなどを登録することができました｡
次にdemo-net（プライベート）側に登録してみます。

>--
# neutron subnet-create --name demo-net_subnet --enable_dhcp=True --allocation-pool=start=192.168.0.100,end=192.168.0.254 --gateway=192.168.0.1 --dns-nameserver 8.8.8.8 demo-net 192.168.0.0/24
Created a new subnet:
（略）
--<


◆ゲートウェイの設定
作成したルーター(router1)とパブリックネットワークを接続するため、「ゲートウェイの設定」を行います｡

>--
# neutron router-gateway-set router1 public
Set gateway for router router1
--<


◆外部ネットワークと内部ネットワークの接続
最後にプライベートネットワークを割り当てたインスタンスがFloating IPを割り当てられたときに外に出られるようにするために「ルーターにインターフェイスの追加」を行います｡

>--
# neutron router-interface-add router1 subnet=demo-net_subnet
Added interface xxxx-xxxx-xxxx-xxxx-xxxx to router router1.
--<

routerはneutron router-listコマンドで確認、サブネットはneutron subnet-listコマンドで確認することができます。


Step 9: ユーザーの追加
次に、ユーザーの追加を行います｡
ユーザーを作成する前にユーザーをどのテナント、つまりどのグループに追加するか考えます。作成したテナントにロール、つまり権限を割り振ることで指定した権限を持つユーザーをテナントに追加できます。

ここでは例として、demoというテナントを作り、そのテナントにdemoユーザーを追加する流れを説明します。demoユーザーには利用に最低限必要なMemberの権限を割り当てます。

まず、登録済みのテナントを確認します。

>--
# keystone tenant-list 
+----------------------------------+----------+---------+
|                id                |   name   | enabled |
+----------------------------------+----------+---------+
| 2b0260a2580842abab33b56dae6a145f |  admin   |   True  |
| 20a6abed5e8549f29a76fa26b2b1c8db | services |   True  |
+----------------------------------+----------+---------+
（テナントリストの表示）
--<

次にテナントを登録します。

>--
# keystone tenant-create --name demo --description demo-tenant --enable true
（テナントdemoの作成）
--<

追加したテナントが登録されていることを確認します。

>--
# keystone tenant-list
+----------------------------------+----------+---------+
|                id                |   name   | enabled |
+----------------------------------+----------+---------+
| 2b0260a2580842abab33b56dae6a145f |  admin   |   True  |
| f1217f04d6f94a7ca3df1f4d6122322d |   demo   |   True  |
| 20a6abed5e8549f29a76fa26b2b1c8db | services |   True  |
+----------------------------------+----------+---------+
（テナントの確認）
--<

demoユーザーを作成してみます。パスワードはdemoにします。

>--
# keystone user-create --name demo --pass demo --tenant demo --email demo@example.com --enabled true 
--<

ユーザー作成コマンドはkeystone user-createです。
パラメータはいくつかあるので--helpで確認。--nameがユーザー名、--passがパスワード、--tenantはテナント(Horizonではプロジェクト)名、--enabledは有効化の可否を指定します｡

tenantはHorizonで登録されている「プロジェクト」を確認するか、コマンドでは次のコマンドで確認できます。

・なぜかMemberロールが作られず、それのせいでHorizonの一部の設定にアクセスするとエラーとなるのでロールを追加します（バグ？）。

>--
# keystone role-list 
+----------------------------------+----------+
|                id                |   name   |
+----------------------------------+----------+
| 9fe2ff9ee4384b1894a90878d3e92bab | _member_ |
| f45e9a92b3bc4d839a6f5043d5d5bd52 |  admin   |
+----------------------------------+----------+

（Memberロールがなかったら、以下を実行）

# keystone role-create --name Member
--<

demoユーザーにMember権限を割り当てます。

>--
# keystone user-role-add --user demo --tenant demo --role Member
(demoユーザーをdemoテナントに追加してMemberロールを割り当て)
--<

作成したテナント、ユーザーを最後に確認しましょう。

>--
# keystone tenant-list
（テナントリストの確認）
# keystone user-list
（ユーザーリストの確認）
--<

以上で、ユーザーdemoでOpenStack環境を利用可能になります。
ユーザーはadminユーザーが設定した共有ネットワークを使ってインスタンスでネットワーク接続できます。また、Floating IPを割り当てることで外部PCからインスタンスにアクセスできます。

もちろん、ユーザーが独自のネットワークを作ることもできます。その場合は次のように行います。

・ルーターを作成
・サブネットを作成
・作成したサブネットとルーターをpublicネットワークとつなぐ


Step 10: Novaの設定変更

デフォルト設定のままインストールした場合、Novaは仮想化基盤にqemuを利用するようになっています。パフォーマンスを上げるには以下のように設定を変更します。

KVMモジュールが読み込まれていることを確認します。
またスケジューラーの設定も行っておきます。
>--
# lsmod | grep kvm
kvm_intel              54285  6 
kvm                   332980  1 kvm_intel
(Intel CPUの場合)
kvm                   332980  1 kvm_amd
(AMD CPUの場合)

# vi /etc/nova/nova.conf
（略）
<<<<<<< HEAD
scheduler_default_filters=AllHostsFilter
（略）
libvirt_type=kvm
#libvirt_type=qemu
=======
virt_type=kvm
#virt_type=qemu
>>>>>>> FETCH_HEAD
（設定を変更）

# service openstack-nova-scheduler restart
# service openstack-nova-compute restart
--<


Step 11: インスタンスイメージの登録

OpenStack環境でインスタンスを実行するため、イメージの登録を行ってみます｡
ここでは動作テスト用としてしばしば利用される、CirrOSを登録してみます｡

CirrOSをダウンロードしてOpenStackに登録するには、次のように行います。

>--
# curl -OL http://download.cirros-cloud.net/0.3.2/cirros-0.3.2-x86_64-disk.img

# glance image-create --name="CirrOS 0.3.2" --disk-format=qcow2 \--container-format=bare --is-public=true \< cirros-0.3.2-x86_64-disk.img
+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 64d7c1cd2b6f60c92c14662941cb7913     |
| container_format | bare                                 |
| created_at       | 2014-03-31T02:08:50                  |
| deleted          | False                                |
| deleted_at       | None                                 |
| disk_format      | qcow2                                |
| id               | d1b69800-3b30-42b2-a0b4-3c4a97bcdb1b |
| is_public        | True                                 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | CirrOS 0.3.2                         |
| owner            | 67962937e5f843d0985d23c01a644011     |
| protected        | False                                |
| size             | 13167616                             |
| status           | active                               |
| updated_at       | 2014-03-31T02:08:50                  |
+------------------+--------------------------------------+
--<

以上で、テスト用のインスタンスイメージを登録できました｡

その他のOSを動かすには、公式ドキュメント
「OpenStack Virtual Machine Image Guide」をご覧ください｡

http://docs.openstack.org/image-guide/content/index.html


■動作確認
・「セキュリティグループ」でICMPとSSHを有効化
・インスタンスを起動
・ボリュームの作成
・ボリュームをインスタンスに接続
・dmesg | grep vdでディスク認識を確認

利用するインスタンスは以下からダウンロードできます。

Cirros
http://download.cirros-cloud.net
※0.3.1以上のバージョンを利用してください｡

CentOS
http://repos.fedorapeople.org/repos/openstack/guest-images/

Fedora
http://fedoraproject.org/en/get-fedora#clouds

Ubuntu
http://cloud-images.ubuntu.com


・Floating IPをインスタンスに割り当て
・ホストにSSHアクセスしてそこからインスタンスにアクセス
